import { Injectable, UnauthorizedException, BadRequestException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import * as crypto from 'crypto';
import { UserService } from '../user/user.service';
import { EmailService } from './email.service';
import { Users } from '../../entities/user.entity';
import { RedisService } from '../../../common/redis.service';

@Injectable()
export class AuthService {
  constructor(
    private readonly userService: UserService,
    private readonly jwtService: JwtService,
    private readonly config: ConfigService,
    private readonly emailService: EmailService,
    @InjectRepository(Users)
    private readonly userRepo: Repository<Users>,
    private readonly redis: RedisService,
  ) {}

  // T·∫°o m√£ OTP 6 s·ªë ng·∫´u nhi√™n
  private generateOTP(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // B∆∞·ªõc 1: G·ª≠i OTP ƒë·ªÉ ƒëƒÉng k√Ω
  async sendOTPForRegistration(email: string): Promise<{ message: string }> {
    console.log('üîµ [AuthService] Starting OTP registration for:', email);
    
    // 1. Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i trong DB ch∆∞a
    const existingUser = await this.userService.findByEmail(email);
    if (existingUser) {
      console.log('‚ùå [AuthService] Email already exists in database:', email);
      throw new BadRequestException('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.');
    }

    // 2. Ki·ªÉm tra email c√≥ t·ªìn t·∫°i th·∫≠t kh√¥ng (deep validation)
    console.log('üîç [AuthService] Verifying email exists:', email);
    const emailValidation = await this.emailService.verifyEmailExists(email);
    if (!emailValidation.valid) {
      console.log('‚ùå [AuthService] Email validation failed:', email, '-', emailValidation.reason);
      throw new BadRequestException(emailValidation.reason || 'Email kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ nh·∫≠n th∆∞. Vui l√≤ng ki·ªÉm tra l·∫°i.');
    }
    console.log('‚úÖ [AuthService] Email validation passed:', email);

    // üî• 3. T·∫°o OTP ‚Üí L∆ØU REDIS (KH√îNG DB)
    const otpCode = this.generateOTP();
    const redisKey = `otp:${email}`;
    
    // redis.set('otp:email', code, 'EX', 600) - 10 ph√∫t = 600 seconds
    await this.redis.set(redisKey, otpCode, 600);
    
    console.log('‚úÖ [AuthService] OTP created in Redis:', { email, code: otpCode, ttl: '10 minutes' });

    // 4. G·ª≠i email OTP
    console.log('üìß [AuthService] Attempting to send email...');
    const emailResult = await this.emailService.sendOTPEmail(email, otpCode);
    
    console.log('üìß [AuthService] Email service returned:', {
      success: emailResult.success,
      error: emailResult.error
    });
    
    if (!emailResult.success) {
      // üî• X√≥a OTP t·ª´ Redis v√¨ g·ª≠i email th·∫•t b·∫°i
      console.log('‚ùå [AuthService] Email send failed, deleting OTP from Redis...');
      await this.redis.del(`otp:${email}`);
      
      console.log('üö´ [AuthService] Throwing BadRequestException with message:', emailResult.error);
      throw new BadRequestException(emailResult.error || 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.');
    }

    console.log('‚úÖ [AuthService] OTP registration completed successfully');
    return {
      message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.',
    };
  }

  // B∆∞·ªõc 2: X√°c th·ª±c OTP v√† ƒëƒÉng k√Ω t√†i kho·∫£n
  async verifyOTPAndRegister(
    email: string,
    otpCode: string,
    password: string,
    fullName?: string,
    role?: string,
  ) {
    // üî• 1. ƒê·ªåC OTP T·ª™ REDIS
    const redisKey = `otp:${email}`;
    const storedOTP = await this.redis.get(redisKey);

    if (!storedOTP || storedOTP !== otpCode) {
      throw new BadRequestException('M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
    }

    // üî• 2. X√ìA OTP SAU KHI S·ª¨ D·ª§NG
    await this.redis.del(redisKey);

    // 3. T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng
    const user = await this.userService.createUser(email, password, fullName, role);

    return {
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
      user: {
        id: user.UserID,
        email: user.Email,
        fullName: user.FullName,
      },
    };
  }

  // ƒêƒÉng k√Ω (gi·ªØ l·∫°i cho backward compatibility - s·∫Ω deprecated)
  async register(email: string, password: string, fullName?: string, role?: string) {
    const user = await this.userService.createUser(email, password, fullName, role);
    return {
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
      user: {
        id: user.UserID,
        email: user.Email,
        fullName: user.FullName,
      },
    };
  }

  // üî• NEW: Email Confirmation Registration (replaces OTP)
  async registerWithEmailConfirmation(
    email: string,
    password: string,
    fullName?: string,
    role?: string
  ): Promise<{ message: string }> {
    console.log('üîµ [AuthService] Starting email confirmation registration for:', email);

    // 1. Check if email already exists
    const existingUser = await this.userService.findByEmail(email);
    if (existingUser) {
      console.log('‚ùå [AuthService] Email already exists:', email);
      throw new BadRequestException('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.');
    }

    // 2. Basic email validation (format, MX, disposable only)
    console.log('üîç [AuthService] Validating email:', email);
    const emailValidation = await this.emailService.verifyEmailExists(email);
    if (!emailValidation.valid) {
      console.log('‚ùå [AuthService] Email validation failed:', email);
      throw new BadRequestException(emailValidation.reason || 'Email kh√¥ng h·ª£p l·ªá.');
    }

    // 3. Generate verification token
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const tokenExpiry = new Date();
    tokenExpiry.setHours(tokenExpiry.getHours() + 24); // 24 hours expiry

    console.log('üîë [AuthService] Generated verification token');

    // 4. Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // 5. Create user with unverified status
    const user = this.userRepo.create({
      Email: email,
      PasswordHash: hashedPassword,
      FullName: fullName || 'User',
      RoleID: role ? parseInt(role) : 2, // üî• Default role: 2 (User)
      IsEmailVerified: false,
      EmailVerificationToken: verificationToken,
      EmailVerificationExpiry: tokenExpiry,
    });

    await this.userRepo.save(user);
    console.log('‚úÖ [AuthService] User created with verification token');

    // 6. Create UserProfile automatically
    await this.userService.createUserProfile(user.UserID);
    console.log('‚úÖ [AuthService] UserProfile created');

    // 7. Send verification email
    const frontendUrl = this.config.get<string>('FRONTEND_URL') || 'http://localhost:5173';
    const verificationLink = `${frontendUrl}/verify-email?token=${verificationToken}`;

    console.log('üìß [AuthService] Sending verification email...');
    const emailResult = await this.emailService.sendVerificationEmail(email, verificationLink, fullName || 'User');

    if (!emailResult.success) {
      // Delete user if email fails
      console.log('‚ùå [AuthService] Email failed, deleting user...');
      await this.userRepo.delete({ UserID: user.UserID });
      throw new BadRequestException(emailResult.error || 'Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c.');
    }

    console.log('‚úÖ [AuthService] Email confirmation registration completed');
    return {
      message: 'Ch√∫ng t√¥i ƒë√£ g·ª≠i link x√°c th·ª±c ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng check email ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω.',
    };
  }

  // üî• NEW: Verify Email Token
  async verifyEmailToken(token: string): Promise<{ message: string; user: any }> {
    console.log('üîµ [AuthService] Verifying email token');

    // Find user with this token
    const user = await this.userRepo.findOne({
      where: { EmailVerificationToken: token },
    });

    if (!user) {
      console.log('‚ùå [AuthService] Invalid token');
      throw new BadRequestException('Link x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
    }

    // Check if already verified
    if (user.IsEmailVerified) {
      console.log('‚ö†Ô∏è [AuthService] Email already verified');
      return {
        message: 'Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p.',
        user: {
          id: user.UserID,
          email: user.Email,
          fullName: user.FullName,
        },
      };
    }

    // Check token expiry
    if (user.EmailVerificationExpiry && new Date() > user.EmailVerificationExpiry) {
      console.log('‚ùå [AuthService] Token expired');
      throw new BadRequestException('Link x√°c th·ª±c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng k√Ω l·∫°i.');
    }

    // Mark email as verified
    user.IsEmailVerified = true;
    user.EmailVerificationToken = null;
    user.EmailVerificationExpiry = null;
    await this.userRepo.save(user);

    console.log('‚úÖ [AuthService] Email verified successfully');
    return {
      message: 'X√°c th·ª±c email th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.',
      user: {
        id: user.UserID,
        email: user.Email,
        fullName: user.FullName,
      },
    };
  }

  async validateUser(email: string, password: string) {
    const user = await this.userService.findByEmail(email);
    if (!user) throw new UnauthorizedException('Email kh√¥ng t·ªìn t·∫°i');

    const match = await bcrypt.compare(password, user.PasswordHash);
    if (!match) throw new UnauthorizedException('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');

    return user;
  }

  async getTokens(user: any) {
    const payload = {
      sub: user.UserID,
      email: user.Email,
      role: user.RoleID,
    };

    const accessToken = await this.jwtService.signAsync(payload, {
      secret: this.config.get<string>('ACCESS_TOKEN_SECRET') ?? 'access_secret',
      expiresIn: '15m',
    });

    const refreshToken = await this.jwtService.signAsync(payload, {
      secret: this.config.get<string>('REFRESH_TOKEN_SECRET') ?? 'refresh_secret',
      expiresIn: '7d',
    });

    return { access_token: accessToken, refresh_token: refreshToken };
  }

  async login(email: string, password: string, deviceInfo?: string) {
    const user = await this.validateUser(email, password);
    const tokens = await this.getTokens(user);
    
    // üî• HASH REFRESH_TOKEN ‚Üí L∆ØU REDIS (KH√îNG DB)
    const refreshTokenHash = await bcrypt.hash(tokens.refresh_token, 10);
    const redisKey = `rt:${refreshTokenHash}`;
    
    // üî• redis.set('rt:hash', userId, 'EX', 7 ng√†y = 604800 seconds)
    await this.redis.set(redisKey, user.UserID.toString(), 604800);
    
    // üî• TR·∫¢ C·∫¢ 2 TOKENS - Controller s·∫Ω set v√†o HttpOnly cookie
    return {
      accessToken: tokens.access_token,   // ‚Üí HttpOnly cookie
      refreshToken: tokens.refresh_token, // ‚Üí HttpOnly cookie
      user: {
        UserID: user.UserID,
        Email: user.Email,
        FullName: user.FullName,
        RoleID: user.RoleID,
      },
    };
  }

  async refreshTokens(userId: number, refreshToken: string, deviceInfo?: string) {
    // Verify refresh token signature first
    let payload: any;
    try {
      payload = await this.jwtService.verifyAsync(refreshToken, {
        secret: this.config.get<string>('REFRESH_TOKEN_SECRET') ?? 'refresh_secret',
      });
    } catch (err) {
      throw new UnauthorizedException('Refresh token kh√¥ng h·ª£p l·ªá');
    }

    if (!payload || payload.sub !== userId) {
      throw new UnauthorizedException('Refresh token kh√¥ng h·ª£p l·ªá');
    }

    const user = await this.userService.findById(userId);
    if (!user) throw new UnauthorizedException('Kh√¥ng t√¨m th·∫•y user');

    // üî• HASH REFRESH_TOKEN ‚Üí CHECK REDIS
    const refreshTokenHash = await bcrypt.hash(refreshToken, 10);
    const redisKey = `rt:${refreshTokenHash}`;
    
    const storedUserId = await this.redis.get(redisKey);
    
    if (!storedUserId || parseInt(storedUserId) !== userId) {
      throw new UnauthorizedException('Refresh token kh√¥ng h·ª£p l·ªá');
    }

    // üî• TOKEN ROTATION: X√ìA KEY C≈®, T·∫†O TOKEN M·ªöI
    await this.redis.del(redisKey);

    const newTokens = await this.getTokens(user);
    const newHash = await bcrypt.hash(newTokens.refresh_token, 10);
    const newRedisKey = `rt:${newHash}`;
    
    // L∆∞u token m·ªõi v√†o Redis - 7 ng√†y
    await this.redis.set(newRedisKey, user.UserID.toString(), 604800);

    return { 
      accessToken: newTokens.access_token, 
      refreshToken: newTokens.refresh_token 
    };
  }

  async logout(userId: number, refreshToken?: string) {
    // üî• REDIS DEL - T·ª®C TH√å
    if (refreshToken) {
      const refreshTokenHash = await bcrypt.hash(refreshToken, 10);
      const redisKey = `rt:${refreshTokenHash}`;
      await this.redis.del(redisKey);
    } else {
      // X√≥a t·∫•t c·∫£ refresh tokens c·ªßa user (t√¨m theo pattern)
      await this.redis.delByPattern(`rt:*`);
    }
    return { message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' };
  }

  // ‚úÖ GOOGLE OAUTH LOGIN
  async googleLogin(googleUser: any) {
    const { email, fullName, avatar, googleId } = googleUser;

    // T√¨m user theo email
    let user = await this.userService.findByEmail(email);

    if (!user) {
      // T·∫°o user m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
      const randomPassword = crypto.randomBytes(32).toString('hex');
      user = await this.userService.createUser(email, randomPassword, fullName, '2'); // Role 2 = User

      // T·ª± ƒë·ªông x√°c th·ª±c email
      user.IsEmailVerified = true;
      await this.userRepo.save(user);
    }

    // Generate tokens
    const tokens = await this.getTokens(user);

    // L∆∞u refresh token v√†o Redis
    const refreshTokenHash = await bcrypt.hash(tokens.refresh_token, 10);
    await this.redis.set(`rt:${refreshTokenHash}`, user.UserID.toString(), 604800); // 7 days

    return {
      accessToken: tokens.access_token,
      refreshToken: tokens.refresh_token,
      user: {
        userId: user.UserID,
        email: user.Email,
        fullName: user.FullName,
        isEmailVerified: user.IsEmailVerified,
      },
    };
  }

  // ‚úÖ FACEBOOK OAUTH LOGIN
  async facebookLogin(facebookUser: any) {
    const { email, fullName, avatar, facebookId } = facebookUser;

    // ‚úÖ Email lu√¥n c√≥ (ƒë√£ t·∫°o t·ª´ Facebook ID trong strategy n·∫øu kh√¥ng c√≥ email th·∫≠t)
    // T√¨m user theo email
    let user = await this.userService.findByEmail(email);

    if (!user) {
      // T·∫°o user m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
      const randomPassword = crypto.randomBytes(32).toString('hex');
      user = await this.userService.createUser(email, randomPassword, fullName || 'Facebook User', '2'); // Role 2 = User

      // T·ª± ƒë·ªông x√°c th·ª±c email
      user.IsEmailVerified = true;
      await this.userRepo.save(user);
    }

    // Generate tokens
    const tokens = await this.getTokens(user);

    // L∆∞u refresh token v√†o Redis
    const refreshTokenHash = await bcrypt.hash(tokens.refresh_token, 10);
    await this.redis.set(`rt:${refreshTokenHash}`, user.UserID.toString(), 604800); // 7 days

    return {
      accessToken: tokens.access_token,
      refreshToken: tokens.refresh_token,
      user: {
        userId: user.UserID,
        email: user.Email,
        fullName: user.FullName,
        isEmailVerified: user.IsEmailVerified,
      },
    };
  }

  // ‚úÖ QU√äN M·∫¨T KH·∫®U - B∆∞·ªõc 1: G·ª≠i OTP
  async sendOTPForPasswordReset(email: string): Promise<{ message: string }> {
    console.log('üîµ [AuthService] Starting password reset for:', email);

    // 1. Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong DB kh√¥ng
    const user = await this.userService.findByEmail(email);
    if (!user) {
      console.log('‚ùå [AuthService] Email not found:', email);
      throw new BadRequestException('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.');
    }

    // 2. T·∫°o OTP ‚Üí L∆∞u Redis
    const otpCode = this.generateOTP();
    const redisKey = `password-reset-otp:${email}`;
    
    // L∆∞u OTP v·ªõi TTL 10 ph√∫t
    await this.redis.set(redisKey, otpCode, 600);
    
    console.log('‚úÖ [AuthService] Password reset OTP created:', { email, code: otpCode });

    // 3. G·ª≠i email OTP
    const emailResult = await this.emailService.sendPasswordResetOTP(email, otpCode);
    
    if (!emailResult.success) {
      // X√≥a OTP n·∫øu g·ª≠i email th·∫•t b·∫°i
      await this.redis.del(redisKey);
      throw new BadRequestException(emailResult.error || 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.');
    }

    console.log('‚úÖ [AuthService] Password reset OTP sent successfully');
    return {
      message: 'M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.',
    };
  }

  // ‚úÖ QU√äN M·∫¨T KH·∫®U - B∆∞·ªõc 2: X√°c th·ª±c OTP v√† ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
  async resetPasswordWithOTP(
    email: string,
    otpCode: string,
    newPassword: string,
  ): Promise<{ message: string }> {
    console.log('üîµ [AuthService] Verifying OTP and resetting password for:', email);

    // 1. ƒê·ªçc OTP t·ª´ Redis
    const redisKey = `password-reset-otp:${email}`;
    const storedOTP = await this.redis.get(redisKey);

    if (!storedOTP || storedOTP !== otpCode) {
      console.log('‚ùå [AuthService] Invalid or expired OTP');
      throw new BadRequestException('M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
    }

    // 2. T√¨m user
    const user = await this.userService.findByEmail(email);
    if (!user) {
      throw new BadRequestException('Email kh√¥ng t·ªìn t·∫°i.');
    }

    // 3. Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // 4. C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    user.PasswordHash = hashedPassword;
    await this.userRepo.save(user);

    // 5. X√≥a OTP sau khi s·ª≠ d·ª•ng
    await this.redis.del(redisKey);

    console.log('‚úÖ [AuthService] Password reset successfully');
    return {
      message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
    };
  }
} 